# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import backend_server_pb2 as backend__server__pb2


class BackendServerStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetQuestion = channel.unary_unary(
                '/backendserver.BackendServer/GetQuestion',
                request_serializer=backend__server__pb2.QuestionRequest.SerializeToString,
                response_deserializer=backend__server__pb2.QuestionResponse.FromString,
                )
        self.CreateCategory = channel.unary_unary(
                '/backendserver.BackendServer/CreateCategory',
                request_serializer=backend__server__pb2.Category.SerializeToString,
                response_deserializer=backend__server__pb2.SuccessMessage.FromString,
                )
        self.EnterQuestion = channel.unary_unary(
                '/backendserver.BackendServer/EnterQuestion',
                request_serializer=backend__server__pb2.QuestionSubmission.SerializeToString,
                response_deserializer=backend__server__pb2.SuccessMessage.FromString,
                )


class BackendServerServicer(object):
    """Interface exported by the server.
    """

    def GetQuestion(self, request, context):
        """send the question
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCategory(self, request, context):
        """rpc GetSocket(SocketMessage) returns (Socket) {}

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnterQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackendServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuestion,
                    request_deserializer=backend__server__pb2.QuestionRequest.FromString,
                    response_serializer=backend__server__pb2.QuestionResponse.SerializeToString,
            ),
            'CreateCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCategory,
                    request_deserializer=backend__server__pb2.Category.FromString,
                    response_serializer=backend__server__pb2.SuccessMessage.SerializeToString,
            ),
            'EnterQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.EnterQuestion,
                    request_deserializer=backend__server__pb2.QuestionSubmission.FromString,
                    response_serializer=backend__server__pb2.SuccessMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'backendserver.BackendServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BackendServer(object):
    """Interface exported by the server.
    """

    @staticmethod
    def GetQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backendserver.BackendServer/GetQuestion',
            backend__server__pb2.QuestionRequest.SerializeToString,
            backend__server__pb2.QuestionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backendserver.BackendServer/CreateCategory',
            backend__server__pb2.Category.SerializeToString,
            backend__server__pb2.SuccessMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnterQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backendserver.BackendServer/EnterQuestion',
            backend__server__pb2.QuestionSubmission.SerializeToString,
            backend__server__pb2.SuccessMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
